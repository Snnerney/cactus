---
// GitHub 风格热力图组件（增强版）
// props: { data: Record<string, number> }  // key: yyyy-mm-dd, value: count
interface Props {
  data: Record<string, number>;
}

const { data = {} } = Astro.props;

// 获取所有可用年份
const allDates = Object.keys(data).map(d => new Date(d));
const availableYears = [...new Set(allDates.map(d => d.getFullYear()))].sort((a, b) => b - a);
const currentYear = new Date().getFullYear();

// 如果没有数据，至少显示当前年份
if (availableYears.length === 0) {
  availableYears.push(currentYear);
}
---

<div class="heatmap-container">
  <!-- 年份选择器和统计信息 -->
  <div class="flex justify-between items-center mb-4">
    <div class="text-sm text-gray-600 transition-all duration-300">
      <span id="year-stats" class="font-medium">载入中...</span>
    </div>
    <div class="flex items-center gap-3">
      <span class="text-sm text-gray-600">年份:</span>
      <div class="relative">
        <select id="year-selector" class="appearance-none px-3 py-2 pr-8 border border-gray-300 rounded-lg text-sm bg-white hover:border-indigo-400 focus:border-indigo-500 focus:ring-2 focus:ring-indigo-200 transition-all duration-200 cursor-pointer">
          {availableYears.map(year => (
            <option value={year} selected={year === currentYear}>
              {year}
            </option>
          ))}
        </select>
        <div class="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none">
          <svg class="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
          </svg>
        </div>
      </div>
    </div>
  </div>

  <!-- 热力图容器 -->
  <div class="heatmap-wrapper overflow-x-auto bg-gradient-to-br from-gray-50 to-white rounded-xl p-4 border border-gray-100 shadow-sm">
    <div id="heatmap-loading" class="text-center py-8 text-gray-500">
      <div class="animate-spin inline-block w-6 h-6 border-2 border-current border-t-transparent rounded-full" role="status">
        <span class="sr-only">载入中...</span>
      </div>
      <div class="mt-2">正在生成热力图...</div>
    </div>
    <div id="heatmap-svg-container" class="opacity-0 transition-opacity duration-500">
      <!-- SVG 将通过 JavaScript 动态生成 -->
    </div>
  </div>
  
  <!-- 颜色图例和统计 -->
  <div class="mt-4 flex items-center justify-between">
    <div class="flex items-center text-xs text-gray-500">
      <span class="mr-3">少</span>
      <div class="flex gap-1">
        <div class="w-3 h-3 rounded transition-transform hover:scale-110 cursor-help" style="background-color: #ebedf0;" title="0 篇文章"></div>
        <div class="w-3 h-3 rounded transition-transform hover:scale-110 cursor-help" style="background-color: #9be9a8;" title="1 篇文章"></div>
        <div class="w-3 h-3 rounded transition-transform hover:scale-110 cursor-help" style="background-color: #40c463;" title="2 篇文章"></div>
        <div class="w-3 h-3 rounded transition-transform hover:scale-110 cursor-help" style="background-color: #30a14e;" title="3-4 篇文章"></div>
        <div class="w-3 h-3 rounded transition-transform hover:scale-110 cursor-help" style="background-color: #216e39;" title="5+ 篇文章"></div>
      </div>
      <span class="ml-3">多</span>
    </div>
    <div class="text-xs text-gray-400 flex items-center">
      <svg class="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
        <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clip-rule="evenodd"/>
      </svg>
      灵感来源于 GitHub 贡献图表
    </div>
  </div>

  <!-- 详细统计面板 -->
  <div id="stats-panel" class="mt-4 p-4 bg-gray-50 rounded-lg border border-gray-200 opacity-0 transition-all duration-300">
    <div class="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
      <div class="text-center">
        <div id="total-days" class="text-lg font-bold text-gray-800">-</div>
        <div class="text-gray-600">总天数</div>
      </div>
      <div class="text-center">
        <div id="active-days" class="text-lg font-bold text-green-600">-</div>
        <div class="text-gray-600">活跃天数</div>
      </div>
      <div class="text-center">
        <div id="max-streak" class="text-lg font-bold text-blue-600">-</div>
        <div class="text-gray-600">最长连击</div>
      </div>
      <div class="text-center">
        <div id="avg-posts" class="text-lg font-bold text-purple-600">-</div>
        <div class="text-gray-600">平均每天</div>
      </div>
    </div>
  </div>
</div>

<style>
  .heatmap-wrapper {
    padding-left: 30px;
    min-height: 140px;
  }
  
  .heatmap-rect {
    transition: all 0.2s ease;
    cursor: pointer;
  }
  
  .heatmap-rect:hover {
    stroke: #333 !important;
    stroke-width: 2 !important;
    transform: scale(1.1);
    filter: brightness(1.1);
  }
  
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  .animate-fade-in-up {
    animation: fadeInUp 0.5s ease-out;
  }
  
  @keyframes shimmer {
    0% { transform: translateX(-100%); }
    100% { transform: translateX(100%); }
  }
  
  .shimmer {
    position: relative;
    overflow: hidden;
  }
  
  .shimmer::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.6), transparent);
    animation: shimmer 2s infinite;
  }
</style>

<script define:vars={{data, availableYears, currentYear}}>
  // 工具函数
  function getColor(count) {
    if (!count) return '#ebedf0';
    if (count >= 5) return '#216e39';
    if (count >= 3) return '#30a14e';
    if (count >= 2) return '#40c463';
    return '#9be9a8';
  }

  function getDateRange(start, end) {
    const arr = [];
    let dt = new Date(start);
    while (dt <= end) {
      arr.push(new Date(dt));
      dt.setDate(dt.getDate() + 1);
    }
    return arr;
  }

  // 计算统计数据
  function calculateStats(yearData, days) {
    const activeDays = Object.keys(yearData).filter(date => yearData[date] > 0).length;
    const totalPosts = Object.values(yearData).reduce((sum, count) => sum + count, 0);
    
    // 计算最长连击
    let maxStreak = 0;
    let currentStreak = 0;
    
    days.forEach(date => {
      const key = date.toISOString().slice(0, 10);
      if (yearData[key] && yearData[key] > 0) {
        currentStreak++;
        maxStreak = Math.max(maxStreak, currentStreak);
      } else {
        currentStreak = 0;
      }
    });
    
    return {
      totalDays: days.length,
      activeDays,
      totalPosts,
      maxStreak,
      avgPosts: activeDays > 0 ? (totalPosts / activeDays).toFixed(1) : '0'
    };
  }

  // 渲染热力图
  function renderHeatmap(selectedYear) {
    const loadingEl = document.getElementById('heatmap-loading');
    const containerEl = document.getElementById('heatmap-svg-container');
    
    // 显示加载状态
    loadingEl.classList.remove('opacity-0');
    containerEl.classList.add('opacity-0');
    
    setTimeout(() => {
      const startDate = new Date(selectedYear, 0, 1);
      const endDate = new Date(selectedYear, 11, 31);
      
      const adjustedStart = new Date(startDate);
      adjustedStart.setDate(adjustedStart.getDate() - adjustedStart.getDay());
      
      const adjustedEnd = new Date(endDate);
      adjustedEnd.setDate(adjustedEnd.getDate() + (6 - adjustedEnd.getDay()));
      
      const days = getDateRange(adjustedStart, adjustedEnd);
      const weeks = Math.ceil(days.length / 7);
      
      // 过滤年份数据
      const yearData = {};
      Object.keys(data).forEach(dateStr => {
        if (new Date(dateStr).getFullYear() === selectedYear) {
          yearData[dateStr] = data[dateStr];
        }
      });

      // 计算统计数据
      const stats = calculateStats(yearData, days);
      
      // 更新统计信息
      document.getElementById('year-stats').textContent = `${selectedYear} 年共发布 ${stats.totalPosts} 篇文章`;
      
      // 更新详细统计
      document.getElementById('total-days').textContent = stats.totalDays;
      document.getElementById('active-days').textContent = stats.activeDays;
      document.getElementById('max-streak').textContent = stats.maxStreak;
      document.getElementById('avg-posts').textContent = stats.avgPosts;
      
      // 生成SVG
      const svgWidth = weeks * 14;
      const svgHeight = 7 * 14 + 20;
      
      let svg = `<svg width="${svgWidth}" height="${svgHeight}" viewBox="0 0 ${svgWidth} ${svgHeight}" class="animate-fade-in-up">`;
      
      // 月份标签
      for (let w = 0; w < weeks; w++) {
        const weekStart = days[w * 7];
        if (weekStart && weekStart.getDate() <= 7) {
          const month = weekStart.toLocaleDateString('zh-CN', { month: 'short' });
          svg += `<text x="${w * 14}" y="10" font-size="10" fill="#666" text-anchor="start" class="font-medium">${month}</text>`;
        }
      }
      
      // 热力图方块
      svg += '<g transform="translate(0, 15)">';
      let delay = 0;
      for (let w = 0; w < weeks; w++) {
        for (let d = 0; d < 7; d++) {
          const idx = w * 7 + d;
          const date = days[idx];
          if (date) {
            const key = date.toISOString().slice(0, 10);
            const count = yearData[key] || 0;
            const color = getColor(count);
            const title = `${date.toLocaleDateString('zh-CN')} ${count ? count + ' 篇文章' : '无文章'}`;
            
            svg += `<rect x="${w * 14}" y="${d * 14}" width="12" height="12" 
                      fill="${color}" rx="2" ry="2" stroke="#fff" stroke-width="1"
                      class="heatmap-rect" style="animation-delay: ${delay}ms"
                      onmouseover="this.style.transform='scale(1.1)'; this.style.strokeWidth='2'; this.style.stroke='#333'"
                      onmouseout="this.style.transform='scale(1)'; this.style.strokeWidth='1'; this.style.stroke='#fff'">
                      <title>${title}</title>
                    </rect>`;
            delay += 2;
          }
        }
      }
      svg += '</g>';
      
      // 星期标签
      const weekdays = ['日', '一', '二', '三', '四', '五', '六'];
      svg += '<g transform="translate(-25, 15)">';
      weekdays.forEach((day, i) => {
        svg += `<text x="0" y="${i * 14 + 9}" font-size="9" fill="#666" text-anchor="middle" class="font-medium">${day}</text>`;
      });
      svg += '</g>';
      
      svg += '</svg>';
      
      containerEl.innerHTML = svg;
      
      // 隐藏加载，显示内容
      loadingEl.classList.add('opacity-0');
      containerEl.classList.remove('opacity-0');
      
      // 显示统计面板
      document.getElementById('stats-panel').classList.remove('opacity-0');
      
    }, 500); // 模拟加载延迟
  }

  // 初始化
  document.addEventListener('DOMContentLoaded', function() {
    const yearSelector = document.getElementById('year-selector');
    
    const initialYear = availableYears.includes(currentYear) ? currentYear : availableYears[0];
    yearSelector.value = initialYear;
    renderHeatmap(initialYear);
    
    yearSelector.addEventListener('change', function(e) {
      renderHeatmap(parseInt(e.target.value));
    });
  });
</script>