---
interface Props {
  data: Record<string, number>;
  posts: any[];
  notes: any[];
}

const { data = {}, posts = [], notes = [] } = Astro.props;

// 获取过去 6 个月
const now = new Date();
const months = [];
for (let i = 5; i >= 0; i--) {
  const date = new Date(now.getFullYear(), now.getMonth() - i, 1);
  months.push({
    date,
    year: date.getFullYear(),
    month: date.getMonth() + 1,
    shortName: `${date.getFullYear()}.${(date.getMonth() + 1).toString().padStart(2, '0')}`,
  });
}

// 获取某天的文章
function getDayArticles(dateStr: string) {
  const articles: any[] = [];
  [...posts, ...notes].forEach((entry) => {
    const publishDate = entry.data.publishDate;
    if (!publishDate) return;
    const entryDate = publishDate instanceof Date ? publishDate : new Date(publishDate);
    if (entryDate.toISOString().slice(0, 10) === dateStr) {
      const baseUrl = entry.collection === "post" ? "/posts/" : "/notes/";
      const slug = entry.slug || entry.id;
      articles.push({
        title: entry.data.title || "无标题",
        type: entry.collection === "post" ? "blog" : "note",
        url: `${baseUrl}${slug}`,
      });
    }
  });
  return articles;
}

// 收集所有有文章的日期
const allActiveDays: any[] = [];
Object.keys(data).forEach((dateKey) => {
  if (data[dateKey] > 0) {
    const date = new Date(dateKey);
    allActiveDays.push({
      date,
      dateKey,
      count: data[dateKey],
      articles: getDayArticles(dateKey),
      formatted: date.toLocaleDateString("zh-CN", { month: "short", day: "numeric" }),
    });
  }
});
allActiveDays.sort((a, b) => a.date.getTime() - b.date.getTime());

// 时间轴范围
const startDate = months[0].date;
const endDate = new Date(months[months.length - 1].year, months[months.length - 1].month, 0);
const totalDays = (endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24);
---

<div class="timeline-container relative w-full">
  <p class="text-sm text-gray-600 mb-4">Time Line</p>

  <div class="timeline-track relative h-[120px]">
    <!-- 主轴线 -->
    <div class="absolute bottom-6 left-0 right-0 h-px bg-gray-400"></div>

    <!-- 月份标签 -->
    <div class="absolute bottom-0 left-0 right-0">
      {months.map((month) => {
        const monthPos = (month.date.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24);
        const left = (monthPos / totalDays) * 100;
        return (
          <div
            class="absolute text-xs text-gray-700 font-medium transform -translate-x-1/2"
            style={`left:${left}%`}
          >
            {month.shortName}
          </div>
        );
      })}
    </div>

    <!-- 每天竖线 -->
    <div class="absolute bottom-6 left-0 right-0">
      {allActiveDays.map((day) => {
        const dayPos = (day.date.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24);
        const left = (dayPos / totalDays) * 100;
        return (
          <div
            class="absolute transform -translate-x-1/2 group day-line-group"
            style={`left:${left}%; bottom:0;`}
            data-date={day.formatted}
          >
            {day.articles.map((article) => (
              <div
                class="w-0.5 bg-blue-600 hover:bg-blue-800 cursor-pointer"
                style="height:14px; margin-bottom:1px;"
                data-title={article.title}
                data-url={article.url}
                data-type={article.type}
              ></div>
            ))}
          </div>
        );
      })}
    </div>

    <!-- hover 浮层 -->
    <div
      id="info-display"
      class="absolute bg-white border border-gray-300 rounded px-3 py-2 text-xs text-gray-700 shadow-md opacity-0 pointer-events-none transition-opacity whitespace-nowrap"
    >
      <div id="info-date" class="font-medium mb-1"></div>
      <div id="info-links" class="space-y-1"></div>
    </div>
  </div>
</div>

<style>
  #info-display {
    max-width: 300px;
    z-index: 50;
  }
  #info-links a {
    color: #2563eb;
    text-decoration: none;
  }
  #info-links a:hover {
    text-decoration: underline;
    color: #1d4ed8;
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const infoDisplay = document.getElementById("info-display");
    const infoDate = document.getElementById("info-date");
    const infoLinks = document.getElementById("info-links");

    let hoverTarget = null;
    let hideTimer = null;

    function showTooltip(group, e) {
      const date = group.getAttribute("data-date");
      const articles = group.querySelectorAll("div[data-title]");
      if (!articles.length) return;

      infoDate.textContent = `${date}：${articles.length} 篇文章`;
      infoLinks.innerHTML = "";
      articles.forEach((article) => {
        const title = article.getAttribute("data-title");
        const url = article.getAttribute("data-url");
        const type = article.getAttribute("data-type");
        const link = document.createElement("a");
        link.href = url;
        link.target = "_blank";
        link.className = "block text-xs";
        link.innerHTML = `${title} <span class="text-gray-500">[${type}]</span>`;
        infoLinks.appendChild(link);
      });

      const rect = group.getBoundingClientRect();
      const parentRect = group.closest(".timeline-track").getBoundingClientRect();

      infoDisplay.style.left = rect.left - parentRect.left + "px";
      infoDisplay.style.top = rect.bottom - parentRect.top + 12 + "px";

      infoDisplay.style.opacity = "1";
      infoDisplay.style.pointerEvents = "auto";
    }

    function hideTooltip() {
      infoDisplay.style.opacity = "0";
      infoDisplay.style.pointerEvents = "none";
    }

    document.querySelectorAll(".day-line-group").forEach((group) => {
      group.addEventListener("mouseenter", (e) => {
        clearTimeout(hideTimer);
        hoverTarget = group;
        showTooltip(group, e);
      });
      group.addEventListener("mouseleave", () => {
        hideTimer = setTimeout(() => {
          if (hoverTarget === group) hideTooltip();
        }, 200);
      });
    });

    infoDisplay.addEventListener("mouseenter", () => {
      clearTimeout(hideTimer);
    });
    infoDisplay.addEventListener("mouseleave", () => {
      hideTimer = setTimeout(hideTooltip, 200);
    });
  });
</script>
