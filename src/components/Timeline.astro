---
// 横向时间轴组件（仿照图片样式）
interface Props {
  data: Record<string, number>;
  posts: any[];
  notes: any[];
}

const { data = {}, posts = [], notes = [] } = Astro.props;

// 获取过去12个月的数据
const now = new Date();
const months = [];
for (let i = 11; i >= 0; i--) {
  const date = new Date(now.getFullYear(), now.getMonth() - i, 1);
  months.push({
    date,
    year: date.getFullYear(),
    month: date.getMonth() + 1,
    monthName: date.toLocaleDateString('zh-CN', { month: 'numeric' }),
    shortName: `${date.getFullYear()}.${(date.getMonth() + 1).toString().padStart(2, '0')}`,
    fullName: date.toLocaleDateString('zh-CN', { year: 'numeric', month: 'long' })
  });
}

// 计算每个月的文章总数
const monthlyData = months.map(month => {
  let count = 0;
  const monthStart = new Date(month.year, month.month - 1, 1);
  const monthEnd = new Date(month.year, month.month, 0);
  
  for (let d = monthStart; d <= monthEnd; d.setDate(d.getDate() + 1)) {
    const dateKey = d.toISOString().slice(0, 10);
    if (data[dateKey]) {
      count += data[dateKey];
    }
  }
  
  return {
    ...month,
    count
  };
});

// 获取每日文章详情（包含链接）
function getDayArticles(dateStr: string) {
  const articles = [];
  const targetDate = new Date(dateStr);
  
  [...posts, ...notes].forEach(entry => {
    const publishDate = entry.data.publishDate;
    if (!publishDate) return;
    
    let entryDate;
    if (publishDate instanceof Date) {
      entryDate = publishDate;
    } else {
      entryDate = new Date(publishDate);
    }
    
    if (entryDate.toISOString().slice(0, 10) === dateStr) {
      // 构建文章链接
      const baseUrl = entry.collection === 'post' ? '/posts/' : '/notes/';
      const slug = entry.slug || entry.id;
      
      articles.push({
        title: entry.data.title || '无标题',
        type: entry.collection === 'post' ? 'blog' : 'note',
        url: `${baseUrl}${slug}`,
        date: entryDate
      });
    }
  });
  
  return articles;
}

// 生成所有有文章的日期，用于在月份之间显示
const allActiveDays = [];
Object.keys(data).forEach(dateKey => {
  if (data[dateKey] > 0) {
    const date = new Date(dateKey);
    const articles = getDayArticles(dateKey);
    
    allActiveDays.push({
      date,
      dateKey,
      count: data[dateKey],
      articles,
      day: date.getDate(),
      month: date.getMonth() + 1,
      year: date.getFullYear(),
      formatted: date.toLocaleDateString('zh-CN', { month: 'short', day: 'numeric' })
    });
  }
});

// 按日期排序
allActiveDays.sort((a, b) => a.date.getTime() - b.date.getTime());
---

<div class="timeline-container">
  <!-- 时间轴标题 -->
  <div class="mb-6">
    <h2 class="text-lg font-semibold mb-2 text-gray-800">写作时间轴</h2>
    <p class="text-sm text-gray-600">过去一年的创作记录</p>
  </div>

  <!-- 横向时间轴 -->
  <div class="timeline-horizontal overflow-x-auto pb-4">
    <div class="timeline-track relative" style="min-width: 1400px; height: 120px;">
      <!-- 主轴线 -->
      <div class="absolute top-16 left-0 right-0 h-px bg-gray-400"></div>
      
      <!-- 月份节点容器 -->
      <div class="relative flex justify-between items-center h-full">
        {monthlyData.map((month, index) => (
          <div class="timeline-month relative flex flex-col items-center" style="flex: 1;">
            <!-- 月份标签（在轴线上方） -->
            <div class="text-xs text-gray-600 mb-2 font-medium">
              {month.shortName}
            </div>
            
            <!-- 月份节点和垂直线 -->
            <div class="relative">
              <!-- 垂直指示线 -->
              <div class="absolute left-1/2 transform -translate-x-1/2 w-px bg-gray-400" style="height: 12px; top: -6px;"></div>
              
              <!-- 月份统计（在轴线下方） -->
              <div class="mt-2 text-center">
                <div class="text-xs font-bold text-blue-600">{month.count}</div>
              </div>
            </div>
          </div>
        ))}
      </div>
      
      <!-- 文章发布日期点（分布在轴线上） -->
      <div class="absolute top-16 left-0 right-0" style="height: 1px;">
        {allActiveDays.map((day, index) => {
          // 计算日期在时间轴上的位置百分比
          const startDate = monthlyData[0].date;
          const endDate = new Date(monthlyData[monthlyData.length - 1].year, monthlyData[monthlyData.length - 1].month, 0);
          const totalDays = (endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24);
          const dayPosition = (day.date.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24);
          const leftPercentage = (dayPosition / totalDays) * 100;
          
          return (
            <div 
              class="absolute day-dot w-2 h-2 bg-blue-500 rounded-full cursor-pointer hover:bg-blue-700 hover:scale-150 transition-all transform -translate-y-1/2 -translate-x-1/2"
              style={`left: ${leftPercentage}%; top: 0;`}
              data-tooltip-html={`
                <div class="text-sm font-medium mb-1">${day.formatted}</div>
                ${day.articles.map(article => 
                  `<div class="text-xs mb-1">
                    <a href="${article.url}" class="text-blue-300 hover:text-blue-100 underline" target="_blank">
                      ${article.title}
                    </a>
                    <span class="text-gray-400 ml-1">[${article.type}]</span>
                  </div>`
                ).join('')}
              `}
            ></div>
          );
        })}
      </div>
    </div>
  </div>

  <!-- 图例说明 -->
  <div class="mt-6 flex items-center justify-center text-xs text-gray-500">
    <div class="flex items-center space-x-6">
      <div class="flex items-center">
        <div class="w-px h-3 bg-gray-400 mr-2"></div>
        <span>月份节点</span>
      </div>
      <div class="flex items-center">
        <div class="w-2 h-2 bg-blue-500 rounded-full mr-2"></div>
        <span>文章发布日 (hover查看链接)</span>
      </div>
    </div>
  </div>

  <!-- Tooltip -->
  <div id="tooltip" class="absolute bg-gray-900 text-white text-xs rounded-lg py-2 px-3 pointer-events-none opacity-0 transition-opacity z-50 shadow-lg max-w-xs">
  </div>
</div>

<style>
  .timeline-horizontal {
    position: relative;
  }
  
  .timeline-track {
    position: relative;
  }
  
  .day-dot {
    position: absolute;
    z-index: 10;
  }
  
  .day-dot:hover {
    z-index: 20;
  }
  
  /* 滚动条样式 */
  .timeline-horizontal {
    scrollbar-width: thin;
    scrollbar-color: #cbd5e1 #f1f5f9;
  }
  
  .timeline-horizontal::-webkit-scrollbar {
    height: 6px;
  }
  
  .timeline-horizontal::-webkit-scrollbar-track {
    background: #f1f5f9;
    border-radius: 3px;
  }
  
  .timeline-horizontal::-webkit-scrollbar-thumb {
    background: #cbd5e1;
    border-radius: 3px;
  }
  
  .timeline-horizontal::-webkit-scrollbar-thumb:hover {
    background: #94a3b8;
  }

  /* Tooltip 内的链接样式 */
  #tooltip a {
    color: #93c5fd;
    text-decoration: underline;
  }
  
  #tooltip a:hover {
    color: #dbeafe;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const tooltip = document.getElementById('tooltip');
    const dayDots = document.querySelectorAll('.day-dot');
    
    dayDots.forEach(dot => {
      dot.addEventListener('mouseenter', function(e) {
        const tooltipHtml = this.getAttribute('data-tooltip-html');
        if (tooltipHtml && tooltip) {
          tooltip.innerHTML = tooltipHtml;
          tooltip.style.opacity = '1';
          
          // 计算位置，避免超出屏幕
          const rect = this.getBoundingClientRect();
          const tooltipRect = tooltip.getBoundingClientRect();
          
          let left = rect.left + (rect.width / 2) - (tooltip.offsetWidth / 2);
          let top = rect.top - tooltip.offsetHeight - 10;
          
          // 防止超出左边界
          if (left < 10) {
            left = 10;
          }
          
          // 防止超出右边界
          if (left + tooltip.offsetWidth > window.innerWidth - 10) {
            left = window.innerWidth - tooltip.offsetWidth - 10;
          }
          
          // 防止超出上边界，如果上方空间不够就显示在下方
          if (top < 10) {
            top = rect.bottom + 10;
          }
          
          tooltip.style.left = left + 'px';
          tooltip.style.top = top + 'px';
        }
      });
      
      dot.addEventListener('mouseleave', function() {
        if (tooltip) {
          tooltip.style.opacity = '0';
          setTimeout(() => {
            tooltip.innerHTML = '';
          }, 300);
        }
      });
    });
  });
</script>