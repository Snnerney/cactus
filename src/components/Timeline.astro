---
// 横向时间轴组件（严格按照图示样式）
interface Props {
  data: Record<string, number>;
  posts: any[];
  notes: any[];
}

const { data = {}, posts = [], notes = [] } = Astro.props;

// 获取过去12个月的数据
const now = new Date();
const months = [];
for (let i = 11; i >= 0; i--) {
  const date = new Date(now.getFullYear(), now.getMonth() - i, 1);
  months.push({
    date,
    year: date.getFullYear(),
    month: date.getMonth() + 1,
    shortName: `${date.getFullYear()}.${(date.getMonth() + 1).toString().padStart(2, '0')}`,
  });
}

// 获取每日文章详情（包含链接）
function getDayArticles(dateStr: string) {
  const articles = [];
  const targetDate = new Date(dateStr);
  
  [...posts, ...notes].forEach(entry => {
    const publishDate = entry.data.publishDate;
    if (!publishDate) return;
    
    let entryDate;
    if (publishDate instanceof Date) {
      entryDate = publishDate;
    } else {
      entryDate = new Date(publishDate);
    }
    
    if (entryDate.toISOString().slice(0, 10) === dateStr) {
      const baseUrl = entry.collection === 'post' ? '/posts/' : '/notes/';
      const slug = entry.slug || entry.id;
      
      articles.push({
        title: entry.data.title || '无标题',
        type: entry.collection === 'post' ? 'blog' : 'note',
        url: `${baseUrl}${slug}`,
        date: entryDate
      });
    }
  });
  
  return articles;
}

// 计算每个月的文章总数
const monthlyData = months.map(month => {
  let count = 0;
  const monthStart = new Date(month.year, month.month - 1, 1);
  const monthEnd = new Date(month.year, month.month, 0);
  
  for (let d = monthStart; d <= monthEnd; d.setDate(d.getDate() + 1)) {
    const dateKey = d.toISOString().slice(0, 10);
    if (data[dateKey]) {
      count += data[dateKey];
    }
  }
  
  return {
    ...month,
    count
  };
});

// 生成所有有文章的日期
const allActiveDays = [];
Object.keys(data).forEach(dateKey => {
  if (data[dateKey] > 0) {
    const date = new Date(dateKey);
    const articles = getDayArticles(dateKey);
    
    allActiveDays.push({
      date,
      dateKey,
      count: data[dateKey],
      articles,
      day: date.getDate(),
      month: date.getMonth() + 1,
      year: date.getFullYear(),
      formatted: date.toLocaleDateString('zh-CN', { month: 'short', day: 'numeric' })
    });
  }
});

allActiveDays.sort((a, b) => a.date.getTime() - b.date.getTime());

// 计算时间轴范围
const startDate = months[0].date;
const endDate = new Date(months[months.length - 1].year, months[months.length - 1].month, 0);
const totalDays = (endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24);

// 计算最大文章数，用于竖线高度比例
const maxCount = Math.max(...monthlyData.map(m => m.count), ...allActiveDays.map(d => d.count), 1);
---

<div class="timeline-container">
  <!-- 时间轴标题 -->
  <div class="mb-6">
    <p class="text-sm text-gray-600">Time Line</p>
  </div>

  <!-- 横向时间轴 -->
  <div class="timeline-horizontal overflow-x-auto pb-4">
    <div class="timeline-track relative" style="min-width: 900px; height: 120px;">
      <!-- 主轴线 -->
      <div class="absolute bottom-10 left-0 right-0 h-px bg-gray-400"></div>
      
      <!-- 月份标签（在轴线下方） -->
      <div class="absolute bottom-0 left-0 right-0">
        <div class="relative">
          {monthlyData.map((month, index) => {
            const monthPosition = (month.date.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24);
            const leftPercentage = (monthPosition / totalDays) * 100;
            
            return (
              <div class="absolute text-xs text-gray-700 font-medium transform -translate-x-1/2" 
                   style={`left: ${leftPercentage}%;`}>
                {month.shortName}
              </div>
            );
          })}
        </div>
      </div>
      
      <!-- 月份竖线（高度根据文章数量调整） -->
      <div class="absolute bottom-10 left-0 right-0">
        {monthlyData.map((month) => {
          const monthPosition = (month.date.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24);
          const leftPercentage = (monthPosition / totalDays) * 100;
          const lineHeight = month.count > 0 ? Math.max(15, (month.count / maxCount) * 60) : 5;
          
          return (
            <div class="absolute transform -translate-x-1/2 month-line" 
                 style={`left: ${leftPercentage}%; bottom: 0;`}
                 data-month-info={`本月发布了 ${month.count} 篇文章`}>
              <div class="w-1 bg-blue-500 cursor-pointer hover:bg-blue-600 transition-colors" 
                   style={`height: ${lineHeight}px;`}></div>
            </div>
          );
        })}
      </div>
      
      <!-- 日期文章竖线（堆叠显示） -->
      <div class="absolute bottom-10 left-0 right-0">
        {allActiveDays.map((day) => {
          const dayPosition = (day.date.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24);
          const leftPercentage = (dayPosition / totalDays) * 100;
          
          return (
            <div class="absolute transform -translate-x-1/2 day-line-group" 
                 style={`left: ${leftPercentage}%; bottom: 0;`}>
              {/* 为每篇文章创建一个竖线段，堆叠显示 */}
              {day.articles.map((article, index) => (
                <div 
                  class="w-0.5 bg-blue-600 cursor-pointer hover:bg-blue-800 transition-colors day-article-line"
                  style={`height: 12px; margin-bottom: 1px;`}
                  data-article-info={`${day.formatted}: ${article.title}`}
                  data-article-url={article.url}
                  data-article-type={article.type}
                ></div>
              ))}
            </div>
          );
        })}
      </div>
      
      <!-- 信息显示区域 -->
      <div id="info-display" class="absolute bottom-2 left-1/2 transform -translate-x-1/2 bg-white border border-gray-300 rounded px-3 py-2 text-xs text-gray-700 shadow-sm opacity-0 transition-opacity pointer-events-none whitespace-nowrap">
        <div id="info-content"></div>
        <div id="info-links" class="mt-1 space-y-1"></div>
      </div>
    </div>
  </div>

  <!-- 删除原来的Tooltip -->
</div>

<style>
  .timeline-horizontal {
    position: relative;
  }
  
  .timeline-track {
    position: relative;
  }
  
  /* 滚动条样式 */
  .timeline-horizontal {
    scrollbar-width: thin;
    scrollbar-color: #cbd5e1 #f1f5f9;
  }
  
  .timeline-horizontal::-webkit-scrollbar {
    height: 6px;
  }
  
  .timeline-horizontal::-webkit-scrollbar-track {
    background: #f1f5f9;
    border-radius: 3px;
  }
  
  .timeline-horizontal::-webkit-scrollbar-thumb {
    background: #cbd5e1;
    border-radius: 3px;
  }
  
  .timeline-horizontal::-webkit-scrollbar-thumb:hover {
    background: #94a3b8;
  }

  /* 信息显示区域样式 */
  #info-display {
    max-width: 300px;
    z-index: 50;
  }
  
  #info-links a {
    color: #2563eb;
    text-decoration: none;
  }
  
  #info-links a:hover {
    color: #1d4ed8;
    text-decoration: underline;
  }
  
  /* 月份线和文章线的悬停效果 */
  .month-line:hover .w-1 {
    filter: brightness(1.1);
  }
  
  .day-article-line:hover {
    filter: brightness(1.2);
    transform: scaleX(1.5);
  }
  
  .day-line-group:hover .day-article-line {
    filter: brightness(1.1);
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const infoDisplay = document.getElementById('info-display');
    const infoContent = document.getElementById('info-content');
    const infoLinks = document.getElementById('info-links');
    
    // 月份竖线hover事件
    const monthLines = document.querySelectorAll('.month-line');
    monthLines.forEach(line => {
      line.addEventListener('mouseenter', function() {
        const monthInfo = this.getAttribute('data-month-info');
        if (infoDisplay && infoContent) {
          infoContent.textContent = monthInfo;
          infoLinks.innerHTML = '';
          infoDisplay.style.opacity = '1';
        }
      });
      
      line.addEventListener('mouseleave', function() {
        if (infoDisplay) {
          infoDisplay.style.opacity = '0';
        }
      });
    });
    
    // 日期文章线组hover事件
    const dayGroups = document.querySelectorAll('.day-line-group');
    dayGroups.forEach(group => {
      const articles = group.querySelectorAll('.day-article-line');
      
      group.addEventListener('mouseenter', function() {
        if (articles.length > 0) {
          const firstArticle = articles[0];
          const dateInfo = firstArticle.getAttribute('data-article-info').split(':')[0];
          
          if (infoDisplay && infoContent && infoLinks) {
            infoContent.textContent = `${dateInfo}: ${articles.length} 篇文章`;
            
            // 显示所有文章链接
            infoLinks.innerHTML = '';
            articles.forEach(article => {
              const title = article.getAttribute('data-article-info').split(': ')[1];
              const url = article.getAttribute('data-article-url');
              const type = article.getAttribute('data-article-type');
              
              const linkDiv = document.createElement('div');
              linkDiv.innerHTML = `
                <a href="${url}" class="text-blue-600 hover:text-blue-800 hover:underline text-xs" target="_blank">
                  ${title} <span class="text-gray-500">[${type}]</span>
                </a>
              `;
              infoLinks.appendChild(linkDiv);
            });
            
            infoDisplay.style.opacity = '1';
          }
        }
      });
      
      group.addEventListener('mouseleave', function() {
        if (infoDisplay) {
          infoDisplay.style.opacity = '0';
        }
      });
      
      // 为每个文章线添加点击事件
      articles.forEach(article => {
        article.addEventListener('click', function() {
          const url = this.getAttribute('data-article-url');
          if (url) {
            window.open(url, '_blank');
          }
        });
      });
    });
  });
</script>