---
// 横向时间轴组件
interface Props {
  data: Record<string, number>;
  posts: any[];
  notes: any[];
}

const { data = {}, posts = [], notes = [] } = Astro.props;

// 获取过去12个月的数据
const now = new Date();
const months = [];
for (let i = 11; i >= 0; i--) {
  const date = new Date(now.getFullYear(), now.getMonth() - i, 1);
  months.push({
    date,
    year: date.getFullYear(),
    month: date.getMonth() + 1,
    monthName: date.toLocaleDateString('zh-CN', { month: 'short' }),
    fullName: date.toLocaleDateString('zh-CN', { year: 'numeric', month: 'long' })
  });
}

// 计算每个月的文章总数
const monthlyData = months.map(month => {
  let count = 0;
  const monthStart = new Date(month.year, month.month - 1, 1);
  const monthEnd = new Date(month.year, month.month, 0);
  
  for (let d = monthStart; d <= monthEnd; d.setDate(d.getDate() + 1)) {
    const dateKey = d.toISOString().slice(0, 10);
    if (data[dateKey]) {
      count += data[dateKey];
    }
  }
  
  return {
    ...month,
    count
  };
});

// 获取每日文章标题
function getDayArticles(dateStr: string) {
  const articles = [];
  const targetDate = new Date(dateStr);
  
  [...posts, ...notes].forEach(entry => {
    const publishDate = entry.data.publishDate;
    if (!publishDate) return;
    
    let entryDate;
    if (publishDate instanceof Date) {
      entryDate = publishDate;
    } else {
      entryDate = new Date(publishDate);
    }
    
    if (entryDate.toISOString().slice(0, 10) === dateStr) {
      articles.push({
        title: entry.data.title || '无标题',
        type: entry.collection === 'post' ? 'blog' : 'note'
      });
    }
  });
  
  return articles;
}

// 为每个月生成每日数据
const detailedMonths = monthlyData.map(month => {
  const days = [];
  const monthStart = new Date(month.year, month.month - 1, 1);
  const monthEnd = new Date(month.year, month.month, 0);
  
  for (let d = new Date(monthStart); d <= monthEnd; d.setDate(d.getDate() + 1)) {
    const dateKey = d.toISOString().slice(0, 10);
    const dayCount = data[dateKey] || 0;
    const articles = getDayArticles(dateKey);
    
    if (dayCount > 0) {
      days.push({
        date: new Date(d),
        dateKey,
        count: dayCount,
        articles,
        day: d.getDate(),
        formatted: d.toLocaleDateString('zh-CN', { month: 'short', day: 'numeric' })
      });
    }
  }
  
  return {
    ...month,
    days
  };
});
---

<div class="timeline-container">
  <!-- 时间轴标题 -->
  <div class="mb-6">
    <h2 class="text-lg font-semibold mb-2 text-gray-800">写作时间轴</h2>
    <p class="text-sm text-gray-600">过去一年的创作记录</p>
  </div>

  <!-- 横向时间轴 -->
  <div class="timeline-horizontal overflow-x-auto">
    <div class="timeline-track relative" style="min-width: 1200px;">
      <!-- 主轴线 -->
      <div class="absolute top-1/2 left-0 right-0 h-0.5 bg-gray-300 transform -translate-y-1/2"></div>
      
      <!-- 月份节点 -->
      <div class="relative flex justify-between items-center h-32">
        {detailedMonths.map((month, index) => (
          <div class="timeline-month relative flex flex-col items-center" style="flex: 1;">
            <!-- 月份节点圆点 -->
            <div class="relative">
              <div class={`w-4 h-4 rounded-full border-2 border-white shadow-md ${
                month.count > 0 ? 'bg-blue-500' : 'bg-gray-300'
              } relative z-10`}>
              </div>
              
              <!-- 月份标签 -->
              <div class="absolute top-6 left-1/2 transform -translate-x-1/2 text-center">
                <div class="text-xs font-medium text-gray-700">{month.monthName}</div>
                <div class="text-xs text-gray-500 mt-1">{month.count} 篇</div>
              </div>
              
              <!-- 日期节点 -->
              {month.days.length > 0 && (
                <div class="absolute top-12 left-1/2 transform -translate-x-1/2">
                  <div class="flex flex-col items-center space-y-1">
                    {month.days.map(day => (
                      <div 
                        class="day-dot w-2 h-2 bg-green-400 rounded-full cursor-pointer hover:bg-green-500 hover:scale-125 transition-all"
                        data-tooltip={`${day.formatted}: ${day.articles.map(a => a.title).join(', ')}`}
                        data-day={day.day}
                      ></div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </div>
        ))}
      </div>
    </div>
  </div>

  <!-- 图例说明 -->
  <div class="mt-6 flex items-center justify-center text-xs text-gray-500">
    <div class="flex items-center space-x-4">
      <div class="flex items-center">
        <div class="w-3 h-3 bg-blue-500 rounded-full mr-1"></div>
        <span>有文章的月份</span>
      </div>
      <div class="flex items-center">
        <div class="w-2 h-2 bg-green-400 rounded-full mr-1"></div>
        <span>发布日期 (hover查看标题)</span>
      </div>
    </div>
  </div>

  <!-- 提示工具 -->
  <div id="tooltip" class="absolute bg-gray-900 text-white text-xs rounded py-1 px-2 pointer-events-none opacity-0 transition-opacity z-50" style="max-width: 200px;">
  </div>
</div>

<style>
  .timeline-horizontal {
    position: relative;
    padding: 20px 0;
  }
  
  .timeline-track {
    position: relative;
  }
  
  .day-dot {
    position: relative;
  }
  
  .day-dot:hover {
    z-index: 20;
  }
  
  /* 滚动条样式 */
  .timeline-horizontal {
    scrollbar-width: thin;
    scrollbar-color: #e5e7eb #f9fafb;
  }
  
  .timeline-horizontal::-webkit-scrollbar {
    height: 6px;
  }
  
  .timeline-horizontal::-webkit-scrollbar-track {
    background: #f9fafb;
    border-radius: 3px;
  }
  
  .timeline-horizontal::-webkit-scrollbar-thumb {
    background: #e5e7eb;
    border-radius: 3px;
  }
  
  .timeline-horizontal::-webkit-scrollbar-thumb:hover {
    background: #d1d5db;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const tooltip = document.getElementById('tooltip');
    const dayDots = document.querySelectorAll('.day-dot');
    
    dayDots.forEach(dot => {
      dot.addEventListener('mouseenter', function(e) {
        const tooltipText = this.getAttribute('data-tooltip');
        if (tooltipText && tooltip) {
          tooltip.textContent = tooltipText;
          tooltip.style.opacity = '1';
          
          // 计算位置
          const rect = this.getBoundingClientRect();
          tooltip.style.left = rect.left + (rect.width / 2) - (tooltip.offsetWidth / 2) + 'px';
          tooltip.style.top = rect.top - tooltip.offsetHeight - 8 + 'px';
        }
      });
      
      dot.addEventListener('mouseleave', function() {
        if (tooltip) {
          tooltip.style.opacity = '0';
        }
      });
    });
  });
</script>