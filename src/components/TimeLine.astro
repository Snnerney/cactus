---
// Timeline 时间轴组件
interface Props {
  data: Record<string, number>;
}

const { data = {} } = Astro.props;

// 处理时间轴数据
const timelineData = Object.entries(data)
  .map(([date, count]) => ({
    date: new Date(date),
    dateStr: date,
    count,
    formatted: new Date(date).toLocaleDateString('zh-CN', { 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric' 
    })
  }))
  .sort((a, b) => b.date.getTime() - a.date.getTime())
  .slice(0, 50); // 限制显示最近50个活跃日期

// 按年份分组
const groupedByYear = timelineData.reduce((acc, item) => {
  const year = item.date.getFullYear();
  if (!acc[year]) acc[year] = [];
  acc[year].push(item);
  return acc;
}, {} as Record<number, typeof timelineData>);

const years = Object.keys(groupedByYear).map(Number).sort((a, b) => b - a);
---

<div class="timeline-container">
  <!-- 时间轴标题 -->
  <div class="mb-6">
    <h2 class="text-xl font-bold text-gray-800 mb-2">写作时间轴</h2>
    <p class="text-sm text-gray-600">记录每一次创作的时光</p>
  </div>

  <!-- 筛选器 -->
  <div class="mb-6 flex gap-2 flex-wrap">
    <button id="show-all" class="filter-btn active px-3 py-1 rounded-full text-xs bg-indigo-100 text-indigo-700 hover:bg-indigo-200 transition-colors">
      全部 ({timelineData.length})
    </button>
    {years.map(year => {
      const yearCount = groupedByYear[year].length;
      return (
        <button class="filter-btn px-3 py-1 rounded-full text-xs bg-gray-100 text-gray-700 hover:bg-gray-200 transition-colors" 
                data-year={year}>
          {year} ({yearCount})
        </button>
      );
    })}
  </div>

  <!-- 时间轴容器 -->
  <div class="timeline-wrapper">
    <div class="relative">
      <!-- 垂直线 -->
      <div class="absolute left-6 top-0 bottom-0 w-0.5 bg-gradient-to-b from-indigo-200 via-indigo-300 to-indigo-200"></div>
      
      <!-- 时间轴项目 -->
      <div id="timeline-items" class="space-y-6">
        {timelineData.map((item, index) => (
          <div class={`timeline-item opacity-0 transform translate-y-4`} 
               data-year={item.date.getFullYear()}
               style={`animation-delay: ${index * 50}ms`}>
            
            <!-- 时间点 -->
            <div class="relative flex items-start">
              <!-- 圆点 -->
              <div class="absolute left-6 transform -translate-x-1/2 flex items-center justify-center">
                <div class={`w-4 h-4 rounded-full border-2 border-white shadow-md ${
                  item.count >= 3 ? 'bg-green-500' :
                  item.count >= 2 ? 'bg-blue-500' :
                  item.count >= 1 ? 'bg-yellow-500' : 'bg-gray-400'
                } animate-pulse-slow`}>
                  <div class="w-2 h-2 bg-white rounded-full opacity-80"></div>
                </div>
              </div>
              
              <!-- 内容卡片 -->
              <div class="ml-12 flex-1">
                <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-4 hover:shadow-md transition-all duration-300 hover:border-indigo-200">
                  
                  <!-- 日期和统计 -->
                  <div class="flex justify-between items-start mb-2">
                    <div class="text-sm font-medium text-gray-800">
                      {item.formatted}
                    </div>
                    <div class={`px-2 py-1 rounded-full text-xs font-medium ${
                      item.count >= 3 ? 'bg-green-100 text-green-700' :
                      item.count >= 2 ? 'bg-blue-100 text-blue-700' :
                      'bg-yellow-100 text-yellow-700'
                    }`}>
                      {item.count} 篇文章
                    </div>
                  </div>
                  
                  <!-- 进度条 -->
                  <div class="w-full bg-gray-200 rounded-full h-1.5 mb-2">
                    <div class={`h-1.5 rounded-full transition-all duration-1000 ${
                      item.count >= 3 ? 'bg-green-500' :
                      item.count >= 2 ? 'bg-blue-500' :
                      'bg-yellow-500'
                    }`} 
                    style={`width: ${Math.min((item.count / 5) * 100, 100)}%`}></div>
                  </div>
                  
                  <!-- 描述文字 -->
                  <div class="text-xs text-gray-500">
                    {item.count >= 3 ? '高产日 🔥' :
                     item.count >= 2 ? '创作日 ✨' :
                     '记录日 📝'}
                  </div>
                  
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>
      
      <!-- 底部装饰 -->
      <div class="relative mt-8">
        <div class="absolute left-6 transform -translate-x-1/2">
          <div class="w-6 h-6 bg-gradient-to-br from-indigo-400 to-purple-500 rounded-full border-2 border-white shadow-lg flex items-center justify-center">
            <svg class="w-3 h-3 text-white" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
            </svg>
          </div>
        </div>
        <div class="ml-12 text-sm text-gray-500 italic">
          这就是创作的足迹 ✍️
        </div>
      </div>
    </div>
  </div>

  <!-- 统计摘要 -->
  <div class="mt-8 grid grid-cols-1 md:grid-cols-3 gap-4">
    <div class="bg-gradient-to-br from-green-50 to-green-100 p-4 rounded-lg border border-green-200">
      <div class="text-2xl font-bold text-green-700">{timelineData.reduce((sum, item) => sum + item.count, 0)}</div>
      <div class="text-sm text-green-600">总文章数</div>
    </div>
    <div class="bg-gradient-to-br from-blue-50 to-blue-100 p-4 rounded-lg border border-blue-200">
      <div class="text-2xl font-bold text-blue-700">{timelineData.length}</div>
      <div class="text-sm text-blue-600">活跃天数</div>
    </div>
    <div class="bg-gradient-to-br from-purple-50 to-purple-100 p-4 rounded-lg border border-purple-200">
      <div class="text-2xl font-bold text-purple-700">{years.length}</div>
      <div class="text-sm text-purple-600">创作年份</div>
    </div>
  </div>
</div>

<style>
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  @keyframes pulse-slow {
    0%, 100% {
      opacity: 1;
    }
    50% {
      opacity: 0.7;
    }
  }
  
  .timeline-item {
    animation: fadeInUp 0.6s ease-out forwards;
  }
  
  .animate-pulse-slow {
    animation: pulse-slow 3s ease-in-out infinite;
  }
  
  .filter-btn.active {
    @apply bg-indigo-500 text-white;
  }
  
  .timeline-item.hidden {
    display: none;
  }
  
  /* 滚动条样式 */
  .timeline-wrapper {
    max-height: 80vh;
    overflow-y: auto;
    scrollbar-width: thin;
    scrollbar-color: #e5e7eb #f9fafb;
  }
  
  .timeline-wrapper::-webkit-scrollbar {
    width: 6px;
  }
  
  .timeline-wrapper::-webkit-scrollbar-track {
    background: #f9fafb;
    border-radius: 3px;
  }
  
  .timeline-wrapper::-webkit-scrollbar-thumb {
    background: #e5e7eb;
    border-radius: 3px;
  }
  
  .timeline-wrapper::-webkit-scrollbar-thumb:hover {
    background: #d1d5db;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const filterBtns = document.querySelectorAll('.filter-btn');
    const timelineItems = document.querySelectorAll('.timeline-item');
    
    // 筛选功能
    filterBtns.forEach(btn => {
      btn.addEventListener('click', function() {
        // 移除其他按钮的active状态
        filterBtns.forEach(b => b.classList.remove('active'));
        this.classList.add('active');
        
        const selectedYear = this.dataset.year;
        
        timelineItems.forEach((item, index) => {
          if (!selectedYear || item.dataset.year === selectedYear) {
            item.classList.remove('hidden');
            // 重新设置动画延迟
            item.style.animationDelay = `${index * 50}ms`;
          } else {
            item.classList.add('hidden');
          }
        });
      });
    });
    
    // 滚动到顶部功能
    const scrollToTop = () => {
      document.querySelector('.timeline-wrapper').scrollTo({
        top: 0,
        behavior: 'smooth'
      });
    };
    
    // 为每个筛选按钮添加滚动到顶部
    filterBtns.forEach(btn => {
      btn.addEventListener('click', () => {
        setTimeout(scrollToTop, 100);
      });
    });
  });
</script>